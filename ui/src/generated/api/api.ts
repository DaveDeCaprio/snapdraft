/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface DocumentType
 */
export interface DocumentType {
    /**
     * 
     * @type {string}
     * @memberof DocumentType
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DocumentType
     */
    'id'?: string | null;
    /**
     * 
     * @type {Array<SourceType>}
     * @memberof DocumentType
     */
    'sources'?: Array<SourceType>;
    /**
     * 
     * @type {string}
     * @memberof DocumentType
     */
    'instructions'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocumentType
     */
    'template_file_id'?: string | null;
}
/**
 * 
 * @export
 * @interface Draft
 */
export interface Draft {
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof Draft
     */
    'use_for_training'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    'output_file_id'?: string | null;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Draft
     */
    'source_file_ids'?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    'doc_type_id': string;
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    'output_file_md_id'?: string | null;
}
/**
 * 
 * @export
 * @interface DraftCreate
 */
export interface DraftCreate {
    /**
     * 
     * @type {string}
     * @memberof DraftCreate
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof DraftCreate
     */
    'use_for_training'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DraftCreate
     */
    'output_file_id'?: string | null;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof DraftCreate
     */
    'source_file_ids'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface GenerateDraftResult
 */
export interface GenerateDraftResult {
    /**
     * 
     * @type {string}
     * @memberof GenerateDraftResult
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface Generator
 */
export interface Generator {
    /**
     * 
     * @type {string}
     * @memberof Generator
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Model
 */
export interface Model {
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    'doc_type_id': string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    'version': string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    'generator'?: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    'status'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Model
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    'created_at'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Model
     */
    'draft_ids'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    'trained_model_file_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    'id'?: string | null;
}
/**
 * 
 * @export
 * @interface ModelCreate
 */
export interface ModelCreate {
    /**
     * 
     * @type {string}
     * @memberof ModelCreate
     */
    'generator'?: string;
}
/**
 * 
 * @export
 * @interface RegeneratedDraftResult
 */
export interface RegeneratedDraftResult {
    /**
     * 
     * @type {string}
     * @memberof RegeneratedDraftResult
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof RegeneratedDraftResult
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ResultListDocumentType
 */
export interface ResultListDocumentType {
    /**
     * 
     * @type {Array<DocumentType>}
     * @memberof ResultListDocumentType
     */
    'items': Array<DocumentType>;
}
/**
 * 
 * @export
 * @interface ResultListDraft
 */
export interface ResultListDraft {
    /**
     * 
     * @type {Array<Draft>}
     * @memberof ResultListDraft
     */
    'items': Array<Draft>;
}
/**
 * 
 * @export
 * @interface ResultListGenerator
 */
export interface ResultListGenerator {
    /**
     * 
     * @type {Array<Generator>}
     * @memberof ResultListGenerator
     */
    'items': Array<Generator>;
}
/**
 * 
 * @export
 * @interface ResultListModel
 */
export interface ResultListModel {
    /**
     * 
     * @type {Array<Model>}
     * @memberof ResultListModel
     */
    'items': Array<Model>;
}
/**
 * 
 * @export
 * @interface SourceType
 */
export interface SourceType {
    /**
     * 
     * @type {string}
     * @memberof SourceType
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SourceType
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface StoredFile
 */
export interface StoredFile {
    /**
     * 
     * @type {string}
     * @memberof StoredFile
     */
    'id': string;
    /**
     * 
     * @type {StoredFileMetadata}
     * @memberof StoredFile
     */
    'metadata': StoredFileMetadata;
}
/**
 * 
 * @export
 * @interface StoredFileMetadata
 */
export interface StoredFileMetadata {
    /**
     * 
     * @type {string}
     * @memberof StoredFileMetadata
     */
    'original_filename': string;
    /**
     * 
     * @type {string}
     * @memberof StoredFileMetadata
     */
    'extension': string;
    /**
     * 
     * @type {string}
     * @memberof StoredFileMetadata
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof StoredFileMetadata
     */
    'content_type': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DocumentTypesApi - axios parameter creator
 * @export
 */
export const DocumentTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Document Type
         * @param {DocumentType} documentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentType: async (documentType: DocumentType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentType' is not null or undefined
            assertParamExists('createDocumentType', 'documentType', documentType)
            const localVarPath = `/document-types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(documentType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Draft
         * @param {string} docId 
         * @param {DraftCreate} draftCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDraft: async (docId: string, draftCreate: DraftCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('createDraft', 'docId', docId)
            // verify required parameter 'draftCreate' is not null or undefined
            assertParamExists('createDraft', 'draftCreate', draftCreate)
            const localVarPath = `/document-types/{doc_id}/drafts/`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(draftCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Model
         * @param {string} docId 
         * @param {ModelCreate} modelCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModel: async (docId: string, modelCreate: ModelCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('createModel', 'docId', docId)
            // verify required parameter 'modelCreate' is not null or undefined
            assertParamExists('createModel', 'modelCreate', modelCreate)
            const localVarPath = `/document-types/{doc_id}/models/`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Document Type
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocumentType: async (docId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('deleteDocumentType', 'docId', docId)
            const localVarPath = `/document-types/{doc_id}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Draft
         * @param {string} docId 
         * @param {string} draftId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDraft: async (docId: string, draftId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('deleteDraft', 'docId', docId)
            // verify required parameter 'draftId' is not null or undefined
            assertParamExists('deleteDraft', 'draftId', draftId)
            const localVarPath = `/document-types/{doc_id}/drafts/{draft_id}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"draft_id"}}`, encodeURIComponent(String(draftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Model
         * @param {string} docId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel: async (docId: string, modelId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('deleteModel', 'docId', docId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('deleteModel', 'modelId', modelId)
            const localVarPath = `/document-types/{doc_id}/models/{model_id}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate Draft
         * @param {string} docId 
         * @param {string} draftId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDraft: async (docId: string, draftId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('generateDraft', 'docId', docId)
            // verify required parameter 'draftId' is not null or undefined
            assertParamExists('generateDraft', 'draftId', draftId)
            const localVarPath = `/document-types/{doc_id}/drafts/{draft_id}/generate`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"draft_id"}}`, encodeURIComponent(String(draftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read All Document Types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllDocumentTypes: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/document-types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read All Drafts
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllDrafts: async (docId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('readAllDrafts', 'docId', docId)
            const localVarPath = `/document-types/{doc_id}/drafts/`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read All Models
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllModels: async (docId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('readAllModels', 'docId', docId)
            const localVarPath = `/document-types/{doc_id}/models/`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Document Type
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readDocumentType: async (docId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('readDocumentType', 'docId', docId)
            const localVarPath = `/document-types/{doc_id}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Draft
         * @param {string} docId 
         * @param {string} draftId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readDraft: async (docId: string, draftId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('readDraft', 'docId', docId)
            // verify required parameter 'draftId' is not null or undefined
            assertParamExists('readDraft', 'draftId', draftId)
            const localVarPath = `/document-types/{doc_id}/drafts/{draft_id}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"draft_id"}}`, encodeURIComponent(String(draftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Regenerate Draft
         * @param {string} docId 
         * @param {string} draftId 
         * @param {string} previousText 
         * @param {string} userPrompt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regenerateDraft: async (docId: string, draftId: string, previousText: string, userPrompt: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('regenerateDraft', 'docId', docId)
            // verify required parameter 'draftId' is not null or undefined
            assertParamExists('regenerateDraft', 'draftId', draftId)
            // verify required parameter 'previousText' is not null or undefined
            assertParamExists('regenerateDraft', 'previousText', previousText)
            // verify required parameter 'userPrompt' is not null or undefined
            assertParamExists('regenerateDraft', 'userPrompt', userPrompt)
            const localVarPath = `/document-types/{doc_id}/drafts/{draft_id}/regenerate`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"draft_id"}}`, encodeURIComponent(String(draftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (previousText !== undefined) {
                localVarQueryParameter['previous_text'] = previousText;
            }

            if (userPrompt !== undefined) {
                localVarQueryParameter['user_prompt'] = userPrompt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set Active Model
         * @param {string} docId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setActiveModel: async (docId: string, modelId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('setActiveModel', 'docId', docId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('setActiveModel', 'modelId', modelId)
            const localVarPath = `/document-types/{doc_id}/models/{model_id}/default`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Document Type
         * @param {string} docId 
         * @param {DocumentType} documentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocumentType: async (docId: string, documentType: DocumentType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('updateDocumentType', 'docId', docId)
            // verify required parameter 'documentType' is not null or undefined
            assertParamExists('updateDocumentType', 'documentType', documentType)
            const localVarPath = `/document-types/{doc_id}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(documentType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Draft
         * @param {string} docId 
         * @param {string} draftId 
         * @param {DraftCreate} draftCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDraft: async (docId: string, draftId: string, draftCreate: DraftCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('updateDraft', 'docId', docId)
            // verify required parameter 'draftId' is not null or undefined
            assertParamExists('updateDraft', 'draftId', draftId)
            // verify required parameter 'draftCreate' is not null or undefined
            assertParamExists('updateDraft', 'draftCreate', draftCreate)
            const localVarPath = `/document-types/{doc_id}/drafts/{draft_id}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"draft_id"}}`, encodeURIComponent(String(draftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(draftCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentTypesApi - functional programming interface
 * @export
 */
export const DocumentTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Document Type
         * @param {DocumentType} documentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDocumentType(documentType: DocumentType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDocumentType(documentType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.createDocumentType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Draft
         * @param {string} docId 
         * @param {DraftCreate} draftCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDraft(docId: string, draftCreate: DraftCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Draft>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDraft(docId, draftCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.createDraft']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Model
         * @param {string} docId 
         * @param {ModelCreate} modelCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createModel(docId: string, modelCreate: ModelCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createModel(docId, modelCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.createModel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Document Type
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDocumentType(docId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDocumentType(docId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.deleteDocumentType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Draft
         * @param {string} docId 
         * @param {string} draftId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDraft(docId: string, draftId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDraft(docId, draftId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.deleteDraft']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Model
         * @param {string} docId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteModel(docId: string, modelId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteModel(docId, modelId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.deleteModel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Generate Draft
         * @param {string} docId 
         * @param {string} draftId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateDraft(docId: string, draftId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateDraftResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateDraft(docId, draftId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.generateDraft']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read All Document Types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAllDocumentTypes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListDocumentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAllDocumentTypes(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.readAllDocumentTypes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read All Drafts
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAllDrafts(docId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListDraft>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAllDrafts(docId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.readAllDrafts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read All Models
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAllModels(docId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAllModels(docId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.readAllModels']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Document Type
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readDocumentType(docId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readDocumentType(docId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.readDocumentType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Draft
         * @param {string} docId 
         * @param {string} draftId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readDraft(docId: string, draftId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Draft>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readDraft(docId, draftId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.readDraft']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Regenerate Draft
         * @param {string} docId 
         * @param {string} draftId 
         * @param {string} previousText 
         * @param {string} userPrompt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regenerateDraft(docId: string, draftId: string, previousText: string, userPrompt: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegeneratedDraftResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.regenerateDraft(docId, draftId, previousText, userPrompt, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.regenerateDraft']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set Active Model
         * @param {string} docId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setActiveModel(docId: string, modelId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setActiveModel(docId, modelId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.setActiveModel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Document Type
         * @param {string} docId 
         * @param {DocumentType} documentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDocumentType(docId: string, documentType: DocumentType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDocumentType(docId, documentType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.updateDocumentType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Draft
         * @param {string} docId 
         * @param {string} draftId 
         * @param {DraftCreate} draftCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDraft(docId: string, draftId: string, draftCreate: DraftCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Draft>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDraft(docId, draftId, draftCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.updateDraft']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DocumentTypesApi - factory interface
 * @export
 */
export const DocumentTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentTypesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Document Type
         * @param {DocumentType} documentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentType(documentType: DocumentType, options?: RawAxiosRequestConfig): AxiosPromise<DocumentType> {
            return localVarFp.createDocumentType(documentType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Draft
         * @param {string} docId 
         * @param {DraftCreate} draftCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDraft(docId: string, draftCreate: DraftCreate, options?: RawAxiosRequestConfig): AxiosPromise<Draft> {
            return localVarFp.createDraft(docId, draftCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Model
         * @param {string} docId 
         * @param {ModelCreate} modelCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModel(docId: string, modelCreate: ModelCreate, options?: RawAxiosRequestConfig): AxiosPromise<Model> {
            return localVarFp.createModel(docId, modelCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Document Type
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocumentType(docId: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteDocumentType(docId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Draft
         * @param {string} docId 
         * @param {string} draftId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDraft(docId: string, draftId: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteDraft(docId, draftId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Model
         * @param {string} docId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel(docId: string, modelId: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteModel(docId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate Draft
         * @param {string} docId 
         * @param {string} draftId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDraft(docId: string, draftId: string, options?: RawAxiosRequestConfig): AxiosPromise<GenerateDraftResult> {
            return localVarFp.generateDraft(docId, draftId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read All Document Types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllDocumentTypes(options?: RawAxiosRequestConfig): AxiosPromise<ResultListDocumentType> {
            return localVarFp.readAllDocumentTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read All Drafts
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllDrafts(docId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResultListDraft> {
            return localVarFp.readAllDrafts(docId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read All Models
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllModels(docId: string, options?: RawAxiosRequestConfig): AxiosPromise<ResultListModel> {
            return localVarFp.readAllModels(docId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Document Type
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readDocumentType(docId: string, options?: RawAxiosRequestConfig): AxiosPromise<DocumentType> {
            return localVarFp.readDocumentType(docId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Draft
         * @param {string} docId 
         * @param {string} draftId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readDraft(docId: string, draftId: string, options?: RawAxiosRequestConfig): AxiosPromise<Draft> {
            return localVarFp.readDraft(docId, draftId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Regenerate Draft
         * @param {string} docId 
         * @param {string} draftId 
         * @param {string} previousText 
         * @param {string} userPrompt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regenerateDraft(docId: string, draftId: string, previousText: string, userPrompt: string, options?: RawAxiosRequestConfig): AxiosPromise<RegeneratedDraftResult> {
            return localVarFp.regenerateDraft(docId, draftId, previousText, userPrompt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set Active Model
         * @param {string} docId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setActiveModel(docId: string, modelId: string, options?: RawAxiosRequestConfig): AxiosPromise<Model> {
            return localVarFp.setActiveModel(docId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Document Type
         * @param {string} docId 
         * @param {DocumentType} documentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocumentType(docId: string, documentType: DocumentType, options?: RawAxiosRequestConfig): AxiosPromise<DocumentType> {
            return localVarFp.updateDocumentType(docId, documentType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Draft
         * @param {string} docId 
         * @param {string} draftId 
         * @param {DraftCreate} draftCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDraft(docId: string, draftId: string, draftCreate: DraftCreate, options?: RawAxiosRequestConfig): AxiosPromise<Draft> {
            return localVarFp.updateDraft(docId, draftId, draftCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentTypesApi - object-oriented interface
 * @export
 * @class DocumentTypesApi
 * @extends {BaseAPI}
 */
export class DocumentTypesApi extends BaseAPI {
    /**
     * 
     * @summary Create Document Type
     * @param {DocumentType} documentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public createDocumentType(documentType: DocumentType, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).createDocumentType(documentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Draft
     * @param {string} docId 
     * @param {DraftCreate} draftCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public createDraft(docId: string, draftCreate: DraftCreate, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).createDraft(docId, draftCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Model
     * @param {string} docId 
     * @param {ModelCreate} modelCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public createModel(docId: string, modelCreate: ModelCreate, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).createModel(docId, modelCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Document Type
     * @param {string} docId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public deleteDocumentType(docId: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).deleteDocumentType(docId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Draft
     * @param {string} docId 
     * @param {string} draftId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public deleteDraft(docId: string, draftId: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).deleteDraft(docId, draftId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Model
     * @param {string} docId 
     * @param {string} modelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public deleteModel(docId: string, modelId: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).deleteModel(docId, modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate Draft
     * @param {string} docId 
     * @param {string} draftId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public generateDraft(docId: string, draftId: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).generateDraft(docId, draftId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read All Document Types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public readAllDocumentTypes(options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).readAllDocumentTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read All Drafts
     * @param {string} docId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public readAllDrafts(docId: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).readAllDrafts(docId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read All Models
     * @param {string} docId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public readAllModels(docId: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).readAllModels(docId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Document Type
     * @param {string} docId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public readDocumentType(docId: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).readDocumentType(docId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Draft
     * @param {string} docId 
     * @param {string} draftId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public readDraft(docId: string, draftId: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).readDraft(docId, draftId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Regenerate Draft
     * @param {string} docId 
     * @param {string} draftId 
     * @param {string} previousText 
     * @param {string} userPrompt 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public regenerateDraft(docId: string, draftId: string, previousText: string, userPrompt: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).regenerateDraft(docId, draftId, previousText, userPrompt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set Active Model
     * @param {string} docId 
     * @param {string} modelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public setActiveModel(docId: string, modelId: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).setActiveModel(docId, modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Document Type
     * @param {string} docId 
     * @param {DocumentType} documentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public updateDocumentType(docId: string, documentType: DocumentType, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).updateDocumentType(docId, documentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Draft
     * @param {string} docId 
     * @param {string} draftId 
     * @param {DraftCreate} draftCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public updateDraft(docId: string, draftId: string, draftCreate: DraftCreate, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).updateDraft(docId, draftId, draftCreate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Read Contents
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readContents: async (fileId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('readContents', 'fileId', fileId)
            const localVarPath = `/files/{file_id}/contents`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Stored File
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStoredFile: async (fileId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('readStoredFile', 'fileId', fileId)
            const localVarPath = `/files/{file_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload File
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadFile', 'file', file)
            const localVarPath = `/files/upload/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Read Contents
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readContents(fileId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readContents(fileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilesApi.readContents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Stored File
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readStoredFile(fileId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoredFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readStoredFile(fileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilesApi.readStoredFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload File
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFile(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoredFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilesApi.uploadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiFp(configuration)
    return {
        /**
         * 
         * @summary Read Contents
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readContents(fileId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.readContents(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Stored File
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStoredFile(fileId: string, options?: RawAxiosRequestConfig): AxiosPromise<StoredFile> {
            return localVarFp.readStoredFile(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload File
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(file: File, options?: RawAxiosRequestConfig): AxiosPromise<StoredFile> {
            return localVarFp.uploadFile(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
    /**
     * 
     * @summary Read Contents
     * @param {string} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public readContents(fileId: string, options?: RawAxiosRequestConfig) {
        return FilesApiFp(this.configuration).readContents(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Stored File
     * @param {string} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public readStoredFile(fileId: string, options?: RawAxiosRequestConfig) {
        return FilesApiFp(this.configuration).readStoredFile(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload File
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public uploadFile(file: File, options?: RawAxiosRequestConfig) {
        return FilesApiFp(this.configuration).uploadFile(file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GeneratorsApi - axios parameter creator
 * @export
 */
export const GeneratorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Read All Generators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllGenerators: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/generators/read_all_generators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeneratorsApi - functional programming interface
 * @export
 */
export const GeneratorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeneratorsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Read All Generators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAllGenerators(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListGenerator>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAllGenerators(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeneratorsApi.readAllGenerators']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GeneratorsApi - factory interface
 * @export
 */
export const GeneratorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeneratorsApiFp(configuration)
    return {
        /**
         * 
         * @summary Read All Generators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllGenerators(options?: RawAxiosRequestConfig): AxiosPromise<ResultListGenerator> {
            return localVarFp.readAllGenerators(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GeneratorsApi - object-oriented interface
 * @export
 * @class GeneratorsApi
 * @extends {BaseAPI}
 */
export class GeneratorsApi extends BaseAPI {
    /**
     * 
     * @summary Read All Generators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneratorsApi
     */
    public readAllGenerators(options?: RawAxiosRequestConfig) {
        return GeneratorsApiFp(this.configuration).readAllGenerators(options).then((request) => request(this.axios, this.basePath));
    }
}



