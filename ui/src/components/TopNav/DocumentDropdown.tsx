import React, { useState, useEffect, useRef } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import {documentApi} from "@/lib/apiClient.ts";

const DocumentDropdown: React.FC = () => {
    const [documentTypes, setDocumentTypes] = useState<{ id: string, name: string }[]>([]);
    const navigate = useNavigate();
    const { id } = useParams<{ id: string }>(); // Use the document ID directly from the URL
    const [showModal, setShowModal] = useState(false); // State for showing modal
    const [newDocName, setNewDocName] = useState(''); // State for the new document name
    const modalRef = useRef<HTMLDivElement | null>(null); // Ref for the modal

    useEffect(() => {
        const getDocumentTypes = async () => {
            try {
                const response = await documentApi.readAllDocumentTypes(); // The autogenerated function for listing document types
                setDocumentTypes(response.data.items);
            } catch (error) {
                console.error("Error fetching document types:", error);
            }
        };
        getDocumentTypes();
    }, []);

    // Handle the document selection from dropdown
    const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
        const selectedDocId = e.target.value;

        if (selectedDocId === 'add-new') {
            setNewDocName(''); // Clear previous input when opening the modal
            setShowModal(true); // Show the modal when "Add New Document" is selected
        } else {
            navigate(`/doc/${selectedDocId}/document`); // Redirect to the selected document's page
        }
    };

    // Handle the creation of the new document when user submits the modal
    const handleCreateDocument = async () => {
        try {
            const response = await documentApi.createDocumentType({ name: newDocName }); // Corrected variable
            const newDocument = response.data;

            // Update document list with the newly created document
            setDocumentTypes([...documentTypes, newDocument]);

            // Reset modal state and redirect to the new document page
            setShowModal(false);
            setNewDocName('');
            navigate(`/doc/${newDocument.id}/document`);
        } catch (error) {
            console.error("Error creating document type:", error);
        }
    };

    // Close the modal and clear the input
    const handleCancel = () => {
        setShowModal(false);
        setNewDocName('');
    };

    // Reset modal focus when reopened
    useEffect(() => {
        if (showModal && modalRef.current) {
            modalRef.current.focus(); // Focus on modal to ensure it opens properly
        }
    }, [showModal]);

    return (
        <div>
            {/* Document Dropdown */}
            <div className="relative">
                <select
                    className="bg-white text-gray-800 py-2 px-4 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    onChange={handleChange}
                    value={id || ''}
                >
                    <option value="" disabled>Select or Add Document</option>
                    {documentTypes.map((doc) => (
                        <option key={doc.id} value={doc.id}>
                            {doc.name}
                        </option>
                    ))}
                    <option value="add-new">+ Add New Document Type</option>
                </select>
            </div>

            {/* Modal Dialog for adding new document */}
            {showModal && (
                <div
                    ref={modalRef}
                    tabIndex={-1}
                    className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center"
                >
                    <div className="bg-white p-6 rounded-lg shadow-lg">
                        <h2 className="text-xl font-semibold mb-4">Create New Document</h2>
                        <input
                            type="text"
                            value={newDocName}
                            onChange={(e) => setNewDocName(e.target.value)}
                            placeholder="Enter document name"
                            className="w-full px-3 py-2 mb-4 border text-black rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                        <div className="flex justify-end space-x-2">
                            <button
                                onClick={handleCancel}
                                className="px-4 py-2 bg-gray-400 text-white rounded-md hover:bg-gray-500"
                            >
                                Cancel
                            </button>
                            <button
                                onClick={handleCreateDocument}
                                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                                disabled={!newDocName.trim()} // Disable if no name is entered
                            >
                                Create
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default DocumentDropdown;
